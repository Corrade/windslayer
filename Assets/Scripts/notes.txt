todo
    pre-match
    testing with multiple players
    respawning
    spectator cam

    refactor hit stun and blcok stun to different location probably


gamemodes
    deathmatch. team with most KO's at the end of the time wins. timer. dying -> spec -> respawn

spectator mode
    spec mode: click on player portrait to spec. keypress to cycle through players. dead players including oneself can be viewed; just goes to their gravestone. click on something to enter freecam, which is the default cam if there are no players or something

    spectator mode implemented by client? except ofc ignore all input from spectators
    should despawn player hitbox so they aren't involved in collision checks etc

game flow
    pre-match
        join team 1 or 2
        join spec
        leave arena
        setup arena (host only)
            max players (moves any excess players who've already joined a team into spec)
            gamemode (implement later)
                kill limit
                time limit
                respawn time
        start game (must have at least one player on each team)
    
    combat
        upon death, respawn after a while. whilst waiting move into spec

    end condition
        freeze all players, announce winner, force show scoreboard, transition to pre-match

ui
    main menu
    server browser
        host server interface
    hud
        health and mana
        skills
        chatbox
    skill menu
    tab scoreboard (join teams, leave arena)
    character menu (skills and stats; drag skills to hud skills)
    settings menu
        keybinding

other features
    multiple gamemodes
    kick as host
    move another player to spec as host
    votekick




In order to prevent resource leaks, it is important to unsubscribe from events before you dispose of a subscriber object. 


totally invincible during hit stun?



https://github.com/MFatihMAR/Game-Networking-Resources



elementalist https://www.youtube.com/watch?v=4JMx2fWfuD8
novice https://www.youtube.com/watch?v=iY_swqviRk0
royalz (ws2) https://www.youtube.com/watch?v=W3ci2qglLWo
elementalist (ws2) https://www.youtube.com/watch?v=kU6irPevMfY
rogue https://www.youtube.com/watch?v=y-OZhKhDRC0
monk https://www.youtube.com/watch?v=7esWbQEzSFA
shaolin/counter https://www.youtube.com/watch?v=YG4tUOohzkk





blocking perhaps deviates from the original game: when you're hit whilst blocking, you enter block stun, which interrupts your block. in windslayer it seems like you didn't get stunned at all.

landing on the ground whilst doing an air move: the air move continues on the ground

attack used: startup -> active -> recovery
                               -> OR INSTEAD attacker stun (if you are airborne, hit an enemy and they don't block it. such airborne hits are only possible if you're using a light/strong attack)

hit by enemy -> block stun (if blocking)
             -> OR INSTEAD hit stun

attacker stun and hit stun: suspended (preserve velocity) + silenced + disarmed, also brief invincibility
    hit stun behaves as above when applied by an ability used from the ground https://youtu.be/4JMx2fWfuD8?t=220
    attacker stun behaves as above when applied by an airborne strong attack https://youtu.be/YG4tUOohzkk?t=43

duration
    FOR THE SAME MOVE
    block stun < attacker stun < hit stun
    recovery ~= attacker stun (for an equivalent attack when performed on the ground vs airborne) (?)

if you're hit while in attacker stun (and possibly other stuns), you immediately go into the hit stun / block stun (well, you wouldn't be blocking if you're in attacker stun). this may actually be shorter than your current stun.



abilities https://docs.google.com/spreadsheets/d/1QUnXIzWVExO5JoW9OS_05YbLq0kzF8RGI3YQcIGdbmk/edit?usp=drive_web&ouid=108112850293498042381

oo https://docs.google.com/document/d/1tVc7g_WdPEFBj_nemLt3S26gVPeTTZRs0MWle653z_Q/edit
    often in pursuit of maximum flexibility (minimal immobility), you introduce needless complexity

    design smells
        - rigidity: change is difficult, often requiring multiple other changes to be made
        - fragility: a single change causes widespread breakage
        - immobility: the design is hard to reuse
        - viscosity
            - software viscosity: change is easier to implement through hacks rather than good practices
            - environment viscosity: development environment is slow and inefficient
        - opacity: difficult to understand
        - needless complexity: contains constructs that are not currently useful. usually a symptom of developers being too far ahead of requirements
        - needless repetition
        - data clumps: different sections of code contain identical clumps of data, e.g. fields in many classes, parameters in many methods. consider consolidating these things into a new class and passing around larger objects, e.g. entire ‘classes’ rather than fields
        - refused bequest: when a subclass doesn’t use or must redefine something in the superclass. e.g. if an engineer class inherits an employee class that is mostly suitable but has sales quota fields and methods that the engineer never uses, one should consider moving that sales information to a salesperson subclass
        - switch statements. prefer polymorphism and consider the strategy pattern

    characteristics of good design
        - loose coupling: small chains of dependencies between modules
        - high cohesion: modules and classes are themed and internally unified by some goal

    design principles
        - apply design principles only in response to design smells, not just randomly
        - unconditionally conforming to a principle often leads to needless complexity
        - solid
            - single responsibility principle: a class should only have a single responsibility
            - open-closed principle: software entities should be open for extension but closed for modification
            - liskov substitution principle: subtypes must be substitutable for their base types. all of a superclass’ methods should make - sense in the context of a subclass
            - interface segregation principle: many client-specific interfaces are better than one general-purpose interface
            - dependency inversion principle: one should ‘depend upon abstractions, not concretions’
        - law of demeter/principle of least knowledge
            - classes should know about and interact with as few classes as possible
            - classes that are known/interacted with should be nearby
        - reduce long segments of code by extracting methods
            - identify legs where certain variables aren’t changed; they can be parameters to a new function
        - move methods so that they belong to the class of whose data they use the most
        - encapsulate to protect, e.g. setters and getters
        - program to an interface, not an implementation
        - separate concerns; divide and conquer
        - when implementing different variations of an entity, favour polymorphism/subclassing over conditional logic with variables
            - not suitable if you need to be able to change variations
            - not suitable if it’ll result in an overwhelming number of classes, particularly if there are multiple things being varied
        - favor composition over inheritance

    design patterns
        https://en.wikipedia.org/wiki/Software_design_pattern#Classification_and_list

networking
    https://developer.valvesoftware.com/wiki/Source_Multiplayer_Networking
    https://en.wikipedia.org/wiki/Netcode
    https://en.wikipedia.org/wiki/Lag#Solutions_and_lag_compensation

    https://www.gabrielgambetta.com/client-server-game-architecture.html

    "Source engine server employs techniques such as data compression and lag compensation which are invisible to the client. The client then performs prediction and interpolation to further improve the experience."

    client side prediction uses the same code that the server uses for movement checking/logic


    always send inputs, not position
    not sending the data at all until the player is supposed to see it is the only sure way to keep it secret

    
    During each tick, the server processes incoming user commands, runs a physical simulation step, checks the game rules, and updates all object states.



@SandwichBop I use Vultr.com to host most of my servers, $5 USD/month for a vps, 1 GB RAM, 1 CPU, heaps of bandwidth
DigitalOcean's a good contender




PLAYER CONNECTIONS
    client connect
        server creates player manager
        client -> PlayerMetadataMsg -> server
        server -> PlayerMetadataMsg -> ALL (clients register the new player)
        (fill the client in on all the game happenings. lobby settings, win conditions state if applicable, teams of all players)

    client disconnect
        server -> DisconnectPlayerMsg -> ALL
        (remember to remove the player from all relevant data structures)

LOBBY AND TEAM
    lobby configuration
        client -> LobbySettingsMsg -> server (if the client is the host)
        server -> LobbySettingsMsg -> ALL

    game start
        client -> GameStartMsg -> server (if the client is the host)
        server spawns map, starts timer, spawns players
        server -> SpawnPlayerMsg -> ALL (for each player in a team)
        server -> GameStartMsg -> ALL

    game end
        server -> DespawnPlayerMsg -> ALL (for each player spawned)
        server -> GameEndMsg -> ALL

    team select
        client -> TeamDeclarationMsg -> server (id of the player in the message must match the id of the client)
        server -> TeamDeclarationMsg -> ALL
        server swaps the player's team

        if in-game, additionally sandwich this process between:
            server -> DespawnPlayerMsg -> ALL
            server -> SpawnPlayerMsg -> ALL

    win conditions update (team kill count change, time left change)
        server -> WinConditionsStateMsg -> ALL

    team change
        ?????
        server -> DespawnPlayerMsg -> ALL (disconnect posssibly, team swap, match end)

GAMEPLAY
    client -> PlayerCombatInputMsg -> server
    server -> player movement, player status, player used ability, player got a kill








/*
broadcast just the player client here

// Broadcast the new player to all existing players
using (Message msg = Message.Create(
    Tags.SpawnPlayer,
    new SpawnPlayerMsg(e.Client.ID)
)) {
    foreach (IClient client in m_XmlServer.Server.ClientManager.GetAllClients().Where(x => x != e.Client)) {
        client.SendMessage(msg, SendMode.Reliable);
    }
}

// Broadcast all players (including the new player itself) to the new player
using (DarkRiftWriter w = DarkRiftWriter.Create()) {
    foreach (GameObject p in m_PlayerManagers.Values) {
        PlayerConnectionManager c = p.GetComponent<PlayerConnectionManager>();
        w.Write(new SpawnPlayerMsg(c.ClientID));
    }

    using (Message msg = Message.Create(Tags.SpawnPlayer, w)) {
        e.Client.SendMessage(msg, SendMode.Reliable);
    }
}
*/


